# -*- coding: utf-8 -*-
"""MLOM_Lab7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1npx5ykirAVfByqGRQ7gag9R6M_TXe7_j
"""

pip install gym

import gym
import numpy as np
import random
from PIL import Image

# Creating the environment
env = gym.make("Taxi-v3")
env

# create random state to locate our agent
state = env.reset()
state

render = env.render(mode = "rgb_array")
#show like array
render

#get render as image
pixerlimage = Image.fromarray(render)
pixerlimage.save("TaxiEnv.png")

#number of state & action
print("Number of states :", env.observation_space.n)
#  left,right,top,bottom,pickup,getdown
print("Number of action : ",env.action_space.n)

alpha = 0.1
# using update Q table
gamma = 0.6
epsilon = 0.1

#initial Q table
q_table = np.zeros((500,6))
q_table

number_of_episodes = 10000
for episode in range(number_of_episodes):

  # get random state
  state = env.reset()
  reward = 0

  terminate = False
  while not terminate:
    # select we choose expiration and exploration
    if random.uniform(0,1) < epsilon: #exploration
      action = env.action_space.sample()
      print(action)

    else:
      action = np.argmax(q_table[state])
      print(action)
      nextstate, reward,terminate,info =  env.step(action)
      print(nextstate, reward,terminate,info)

      # Recalculate
      q_value = q_table[state,action]
      max_value = np.max(q_table[nextstate])
      new_q_value = (1-alpha)*q_value + alpha*(reward + gamma*max_value)
      print(new_q_value)

      # Update/replace Q-table
      q_table[state,action] = new_q_value
      state = nextstate

print(q_table)

num_of_epi =10
i = 0
total_penal = 0
for _ in range(num_of_epi):
  state = env.reset()
  reward = 0
  penalty = 0
  terminate = False
  while not terminate:
    action = np.argmax(q_table[state])
    nextstate, reward,terminate,info =  env.step(action)
    i+=1
    render = env.render(mode = "rgb_array")
    image = Image.fromarray(render)
    image.save("Taxi"+str(i)+".png")
    if reward <= -10:
      penalty += 1
    total_penal+=penalty

print(total_penal/num_of_epi)













